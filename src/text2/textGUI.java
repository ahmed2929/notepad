/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package text2;

import static com.sun.java.accessibility.util.GUIInitializedMulticaster.remove;
import static java.awt.AWTEventMulticaster.remove;
import static java.awt.AWTEventMulticaster.remove;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Document;
import javax.swing.text.Highlighter;
import javax.swing.text.JTextComponent;
import java.awt.Color;
import java.awt.Font;
import java.awt.*;
import java.awt.font.*;
import java.io.*;
import javax.swing.*;
/**
 *
 * @author AK
 */
public class textGUI extends javax.swing.JFrame {
    JFrame f;
    JTextArea t; 
    JTextField te;
    /**
     * Creates new form textGUI
     */
    public textGUI() {
        initComponents();
        
        f = new JFrame("editor"); 
        t=new JTextArea();
        te= new JTextField();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktopPane = new javax.swing.JDesktopPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setName("textArea"); // NOI18N
        jScrollPane1.setViewportView(jTextArea1);

        desktopPane.add(jScrollPane1);
        jScrollPane1.setBounds(0, 20, 430, 260);

        jButton2.setText("Search");
        jButton2.setName(""); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });
        desktopPane.add(jButton2);
        jButton2.setBounds(330, 0, 100, 23);

        jTextField1.setName("textfield"); // NOI18N
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        desktopPane.add(jTextField1);
        jTextField1.setBounds(0, 0, 330, 20);

        jButton4.setText("jButton4");
        desktopPane.add(jButton4);
        jButton4.setBounds(200, 40, 73, 23);

        jButton1.setText("jButton1");

        jButton3.setText("jButton3");

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");
        fileMenu.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                fileMenuPropertyChange(evt);
            }
        });

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        openMenuItem.setName("open"); // NOI18N
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('a');
        saveMenuItem.setText("Save ");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        cutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        copyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        pasteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(pasteMenuItem);

        menuBar.add(editMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
 JFileChooser j = new JFileChooser("f:"); 
 int r = j.showOpenDialog(null); 
 if (r == JFileChooser.APPROVE_OPTION) { 
				// Set the label to the path of the selected directory 
				File fi = new File(j.getSelectedFile().getAbsolutePath()); 
                                System.out.println(fi);

				try { 
					// String 
					String s1 = "", sl = ""; 

					// File reader 
					FileReader fr = new FileReader(fi); 
                                        

					// Buffered reader 
					BufferedReader br = new BufferedReader(fr); 

					// Initilize sl 
					sl = br.readLine(); 

					// Take the input from the file 
					while ((s1 = br.readLine()) != null) { 
						sl = sl + "\n" + s1; 
                                              //  System.out.println(sl);
                                                
					} 

					// Set the text 
                                        System.out.println(sl);
                                       
                                            jTextArea1.setText(sl);
                                       
                                        
					 
				} 
				catch (Exception e) { 
					//JOptionPane.showMessageDialog(f, e.getMessage()); 
				System.out.println(e);
                                } 
			}
                           else
				JOptionPane.showMessageDialog(f, "the user cancelled the operation");  
        
        
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void cutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutMenuItemActionPerformed
        // TODO add your handling code here:
       jTextArea1.cut(); 
        
    }//GEN-LAST:event_cutMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
       
     JFileChooser j = new JFileChooser("f:"); 
    int r = j.showSaveDialog(null); 
    if (r == JFileChooser.APPROVE_OPTION) { 

				// Set the label to the path of the selected directory 
				File fi = new File(j.getSelectedFile().getAbsolutePath()); 

				try { 
					// Create a file writer 
					FileWriter wr = new FileWriter(fi, false); 

					// Create buffered writer to write 
					BufferedWriter w = new BufferedWriter(wr); 

					// Write 
                                       
					w.write(jTextArea1.getText()); 

					w.flush(); 
					w.close(); 
				} 
				catch (Exception e) { 
					System.out.println(e);
				} 
			}
                            else
				JOptionPane.showMessageDialog(f, "the user cancelled the operation"); 
       
    
        
        
        
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void copyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyMenuItemActionPerformed
			jTextArea1.copy(); 
    }//GEN-LAST:event_copyMenuItemActionPerformed

    private void pasteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteMenuItemActionPerformed
jTextArea1.paste();
    }//GEN-LAST:event_pasteMenuItemActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
            
        try {       
            textAreaSearch(jTextArea1,jTextField1.getText()) ;
        } catch (BadLocationException ex) {
            Logger.getLogger(textGUI.class.getName()).log(Level.SEVERE, null, ex);
        }


        
    }//GEN-LAST:event_SearchActionPerformed

    private void fileMenuPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_fileMenuPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_fileMenuPropertyChange
    
    class myhightlighter extends DefaultHighlighter.DefaultHighlightPainter{
    
        public myhightlighter(Color color) {
            super(color);
        }
    
    
    }
    DefaultHighlighter.DefaultHighlightPainter highlighter=new myhightlighter(Color.yellow);
    
    public void removeHighlight(JTextComponent textComp){
        
        Highlighter removeHighlighter = textComp.getHighlighter();
        Highlighter.Highlight[] remove = removeHighlighter.getHighlights();
        for (int i = 0; i <remove.length; i++) {
            
            if(remove[i].getPainter() instanceof myhightlighter ){
                
                removeHighlighter.removeHighlight(remove[i]);
            
            }
            
        }
        
        
    }
    
    public void textAreaSearch(JTextComponent textComp,String textString) throws BadLocationException{
        removeHighlight(textComp);
        try{
        
             Highlighter hilight =textComp.getHighlighter();
        Document doc=textComp.getDocument();
        String text=doc.getText(0, doc.getLength());
        int pos=0;
        
       while((pos=text.toUpperCase().indexOf(textString.toUpperCase(),pos))>=0){
            hilight.addHighlight(pos, pos+textString.length(), highlighter);
            pos+=textString.length();
            
       
       
       }
        
        }catch(Exception e){
        
        
            
        }
       
        
       
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

}
